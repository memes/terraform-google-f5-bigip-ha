#cloud-config
# Onboarding script will setup BIG-IP management interface from instance metadata, then apply a runtime-init
# configuration file, if present.
# yamllint disable-line  rule:line-length
# yaml-language-server: $schema=https://raw.githubusercontent.com/canonical/cloud-init/main/cloudinit/config/schemas/versions.schema.cloud-config.json
# spell-checker: disable
# Generated by f5-google-declaration-generator snapshot at 2024-05-17T13:42:59-07:00
---
write_files:
  - path: /config/cloud/onboard.sh
    permissions: '0755'
    owner: 'root:root'
    content: |
      #!/bin/sh
      # shellcheck disable=SC1083
      #
      # Perform early onboarding of BIG-IP for Google Cloud

      # Log an info message
      info()
      {
          echo "$0: INFO: $*" >&2
      }

      # Log an error message and exit
      error()
      {
          echo "$0: ERROR: $*" >&2
          exit 1
      }

      # Return a bearer token for the VM service account to use with GCP APIs
      auth_token()
      {
          attempt=0
          while [ "$${attempt}" -lt 10 ]; do
              auth_token="$(curl -sf --retry 20 -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/service-accounts/default/token | jq --raw-output '.access_token')"
              retval=$?
              if [ "$${retval}" -eq 0 ]; then
                  echo "$${auth_token}"
                  break
              fi
              info "auth_token: $${attempt}: Curl failed with exit code $?; sleeping before retry"
              sleep 15
              attempt=$((attempt+1))
          done
          [ "$${attempt}" -ge 10 ] && \
              info "auth_token: $${attempt}: Failed to get an auth token from metadata server"
          # shellcheck disable=SC2086
          return $${retval}
      }

      # Download the remote resource to provided path
      # $1 = URL
      # $2 = output file
      # $3+ are additional curl arguments
      retry_download()
      {
          url="$1"
          out="$2"
          shift
          shift
          attempt=0
          while [ "$${attempt}" -lt 10 ]; do
              info "retry_download: $${attempt}: Downloading $${url} to $${out}"
              curl -sfL --retry 20 -o "$${out}" "$@" "$${url}"
              retval=$?
              [ "$${retval}" -eq 0 ] && break
              info "retry_download: $${attempt}: Failed to download $${url}: exit code: $${retval}; sleeping before retrying"
              sleep 15
              attempt=$((attempt+1))
          done
          [ "$${attempt}" -ge 10 ] && \
              info "retry_download: Failed to download from $${url}; giving up"
          # shellcheck disable=SC2086
          return $${retval}
      }

      # Recognise GCS storage API requests and handle authentication as necessary.
      # $1 = URL of remote file
      # $2 = output path
      download()
      {
          mkdir -p "$(dirname "$2")" || \
              error "Error creating directory for $2; exit code $?"
          case "$1" in
              gs://*)
                  gs_uri="$(printf '%s' "$${1}" | jq --slurp --raw-input --raw-output 'split("/")[2:]|["", .[0], "/o/", (.[1:]|join("/")|@uri), "?alt=media"]|join("")')" || \
                      error "Error creating JSON API URL from $${1}; exit code $?"
                  auth_token="$(auth_token)" || error "Unable to get auth token"
                  retry_download "$${gs_uri}" "$2" -H "Authorization: Bearer $${auth_token}"
                  ;;
              https://storage.googleapis.com/*)
                  auth_token="$(auth_token)" || error "Unable to get auth token"
                  retry_download "$1" "$2" -H "Authorization: Bearer $${auth_token}"
                  ;;
              ftp://*|http://*|https://*)
                  retry_download "$1" "$2"
                  ;;
              /*)
                  cp "$1" "$2"
                  ;;
              *)
                  info "Unrecognised remote scheme for $1"
                  false
                  ;;
          esac
          return $?
      }


      mkdir -p /var/config/rest/downloads

      info "Starting to onboard; waiting for BIG-IP to be ready"

      # shellcheck disable=SC1091
      . /usr/lib/bigstart/bigip-ready-functions
      wait_bigip_ready

      # Update sysdb values to recommendations and restart services; this should only happen once so that any overrides
      # provided by module consumer in runtime-init config are not changed.
      if [ ! -f /config/cloud/.setDb ]; then
          info "Setting recommended system database values"
          /usr/bin/setdb provision.extramb 1000 || true
          /usr/bin/setdb provision.restjavad.extramb 1384 || /usr/bin/setdb restjavad.useextramb true || true
          /usr/bin/setdb iapplxrpm.timeout 300 || true
          /usr/bin/setdb icrd.timeout 180 || true
          /usr/bin/setdb restjavad.timeout 180 || true
          /usr/bin/setdb restnoded.timeout 180 || true
          bigstart restart restjavad
          bigstart restart restnoded
          touch /config/cloud/.setDB
          info "Completed setting recommended systemd database values"
      fi

      nic_count="$(curl -sf --retry 20 -H "Metadata-Flavor: Google" "http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/?recursive=true" | jq --raw-output '.|length')"
      if [ "$${nic_count}" -gt 1 ] && [ ! -f /config/cloud/.mgmtInterface ]; then
          info "Getting management interface configuration from metadata"
          target_address="$(curl -sf --retry 20 -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/1/ip)"
          target_netmask="$(curl -sf --retry 20 -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/1/subnetmask)"
          target_gateway="$(curl -sf --retry 20 -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/1/gateway)"
          target_mtu="$(curl -sf --retry 20 -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/1/mtu)"
          target_network="$(ipcalc -n "$${target_address}" "$${target_netmask}" | cut -d= -f2)"
          # NOTE: this configuration is based on f5devcentral/terraform-gcp bigip-module boarding script, unless called out
          info "Resetting management interface."
          tmsh modify sys global-settings gui-setup disabled
          tmsh modify sys global-settings mgmt-dhcp disabled
          tmsh delete sys management-route all
          tmsh delete sys management-ip all
          info "Configuring management interface"
          tmsh create sys management-ip "$${target_address}/32"
          tmsh create sys management-route mgmt_gw network "$${target_gateway}/32" type interface mtu "$${target_mtu}"
          tmsh create sys management-route mgmt_net network "$${target_network}/$${target_netmask}" gateway "$${target_gateway}" mtu "$${target_mtu}"
          tmsh create sys management-route default gateway "$${target_gateway}" mtu "$${target_mtu}"
          tmsh modify sys global-settings remote-host add { metadata.google.internal { hostname metadata.google.internal addr 169.254.169.254 } }
          tmsh modify sys management-dhcp sys-mgmt-dhcp-config request-options delete { ntp-servers }
          # MEmes - make sure the GCP metadata server is used for DNS, at least until user explicitly overrides in DO
          tmsh modify sys dns name-servers add { 169.254.169.254 }
          tmsh save /sys config
          touch /config/cloud/.mgmtInterface
          info "Setup of management interface is complete."
      fi

      # Is a management NIC swap necessary?
      current_mgmt_nic="$(tmsh list sys db provision.managementeth value 2>/dev/null | awk -F\" 'NR==2 {print $2}')"
      if [ "$${nic_count}" -gt 1 ] && [ "$${current_mgmt_nic}" != "eth1" ]; then
          info "Management NIC swap is necessary; updating database."
          bigstart stop tmm
          tmsh modify sys db provision.managementeth value eth1
          tmsh modify sys db provision.1nicautoconfig value disable
          tmsh save /sys config
          [ -e "/etc/ts/common/image.cfg" ] && \
              sed -i "s/iface=eth0/iface=eth1/g" /etc/ts/common/image.cfg
          info "Rebooting for management NIC swap."
          reboot
          exit 0
      else
          info "Management NIC swap is not needed; continuing"
      fi
%{ if coalesce(runtime_init_url, "unspecified") != "unspecified" ~}
      # Download and execute runtime-init
      info "Downloading runtime-init installer from ${runtime_init_url}"
      download "${runtime_init_url}" "/var/config/rest/downloads/f5-bigip-runtime-init.gz.run" || \
          error "Failed to download ${runtime_init_url}: exit code: $?"
%{ if coalesce(runtime_init_sha256sum, "unspecified") != "unspecified" ~}
      echo "${runtime_init_sha256sum} /var/config/rest/downloads/f5-bigip-runtime-init.gz.run" | \
          sha256sum --status --check || \
          error "Failed to verify integrity of ${runtime_init_url}: exit code: $?"
%{ endif ~}
%{ endif ~}

      if [ ! -x /usr/local/bin/f5-bigip-runtime-init ] && [ -f /var/config/rest/downloads/f5-bigip-runtime-init.gz.run ]; then
          info "Installing runtime-init package"
          bash /var/config/rest/downloads/f5-bigip-runtime-init.gz.run -- '${runtime_init_installer_args}' || \
              error "Failed to install runtime-init: exit code $?"
      fi

      if [ -f /config/cloud/runtime-init-conf.yaml ]; then
          if [ -x /usr/local/bin/f5-bigip-runtime-init ]; then
              info "Executing runtime-init"
              /usr/local/bin/f5-bigip-runtime-init --config-file /config/cloud/runtime-init-conf.yaml ${runtime_init_extra_args}
              retval=$?
              if [ "$${retval}" -ne 0 ]; then
                  cat /var/log/cloud/bigIpRuntimeInit.log
                  error "Failed to execute runtime-init: exit code: $${retval}"
              fi
          else
              error "Runtime-init is not installed; skipping"
          fi
      else
          error "Runtime-init configuration file was not found at /config/cloud/runtime-init-conf.yaml"
      fi

      # Disable the onboarding systemd unit and enable management route reset unit for future boots
      info "Onboarding complete; disabling f5-gce-onboard.service unit"
      systemctl disable f5-gce-onboard.service
      info "Onboarding complete; enable f5-gce-management-route.service unit"
      systemctl enable f5-gce-management-route.service

      info "Onboarding complete."
  - path: /config/cloud/reset_management_route.sh
    permissions: '0755'
    owner: 'root:root'
    content: |
      #!/bin/sh
      #
      # This script is intended to be executed on every boot to ensure the management default gateway is set correctly. See
      # also `f5-gce-management-route.service` unit on instance.
      #
      # https://support.f5.com/csp/article/K85730674

      info()
      {
          echo "$0: INFO: $*" >&2
      }

      info "Management route reset handler: starting, waiting for BIG-IP to be ready"

      # shellcheck disable=SC1091
      . /usr/lib/bigstart/bigip-ready-functions
      wait_bigip_ready

      nic_count="$(curl -sf --retry 20 -H "Metadata-Flavor: Google" "http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/?recursive=true" | jq --raw-output '.|length')"
      if [ "$${nic_count}" -gt 1 ]; then
          target_gateway="$(curl -sf --retry 20 -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/1/gateway)"
          target_mtu="$(curl -sf --retry 20 -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/network-interfaces/1/mtu)"
          current_gw="$(tmsh list sys management-route default gateway | awk 'NR==2 { print $2 }')"
          while [ "$${current_gw}" != "$${target_gateway}" ]; do
              info "Management route reset handler: setting default gateway to $${target_gateway}; was $${current_gw}."
              tmsh delete sys management-route default
              tmsh create sys management-route default gateway "$${target_gateway}" mtu "$${target_mtu}"
              tmsh save /sys config
              current_gw="$(tmsh list sys management-route default gateway | awk 'NR==2 { print $2 }')"
          done
          info "Management route reset handler: complete."
      else
          info "Management route reset handler: nothing to do"
      fi
  - path: /etc/systemd/system/f5-gce-onboard.service
    permissions: '0644'
    owner: 'root:root'
    content: |
      [Unit]
      Description=BIG-IP onboarding
      After=httpd.service f5-startup.service

      [Service]
      Type=simple
      ExecStart=/config/cloud/onboard.sh
      StandardOutput=journal+console
      StandardError=journal+console

      [Install]
      WantedBy=multi-user.target
  - path: /etc/systemd/system/f5-gce-management-route.service
    permissions: '0644'
    owner: 'root:root'
    content: |
      [Unit]
      Description=Reset BIG-IP management route if necessary
      After=httpd.service f5-startup.service

      [Service]
      Type=simple
      ExecStart=/config/cloud/reset_management_route.sh
      StandardOutput=journal+console
      StandardError=journal+console

      [Install]
      WantedBy=multi-user.target
%{ if coalesce(runtime_init_config, "unspecified") != "unspecified" ~}
  - path: /config/cloud/runtime-init-conf.yaml
    permissions: '0644'
    owner: 'root:root'
    content: |
      ${indent(6, runtime_init_config)}
%{ endif ~}
runcmd:
  - systemctl daemon-reload
  - systemctl enable f5-gce-onboard.service
  - systemctl start f5-gce-onboard.service
