# NOTE: This test-kitchen file contains ERB code to cut-down on boilerplate; YAML
# linters will complain!
# yamllint disable
<%
require 'open3'
require 'json'

# Parse the outputs of the test harness
tf_output, rc = Open3.capture2('terraform -chdir=test/setup output -json')
if rc != 0
  abort 'Failed to capture Terraform output from test/setup'
end
harness_outputs = JSON.parse(tf_output).map { |k,v| [k, v['value']] }.to_h

def array_to_input_var(array)
  return "null" if array.nil?
  "[#{array.map do |e|
      case e
      when nil
      "null"
      when Hash
        hash_to_input_var(e)
      when Array
        array_to_input_var(e)
      when String
        "\\\"#{e}\\\""
      else
        "#{e}"
      end
    end.join(',')}]"
end

def hash_to_input_var(params)
  return "null" if params.nil?
  "{#{params.map do |k, v|
        case v
        when nil
          "#{k}=null"
        when Hash
          "#{k}=#{hash_to_input_var(v)}"
        when Array
          "#{k}=#{array_to_input_var(v)}"
        when String
          "#{k}=\\\"#{v}\\\""
        else
          "#{k}=#{v}"
        end
      end.join(',')}}"
end

versions = {
  '17-1-1' => 'projects/f5-7626-networks-public/global/images/f5-bigip-17-1-1-3-0-0-5-payg-good-25mbps-240321065548',
  '16-1-4' => 'projects/f5-7626-networks-public/global/images/f5-bigip-16-1-4-3-0-0-3-payg-good-25mbps-240410041211',
  '15-1-10' => 'projects/f5-7626-networks-public/global/images/f5-bigip-15-1-10-4-0-0-5-payg-good-25mbps-240322174508',
  '14-1-5' => 'projects/f5-7626-networks-public/global/images/f5-bigip-14-1-5-6-0-12-6-payg-good-25mbps-231106020223'
}

num_instances = 2

def external_interface(num_nics, subnets)
  {
    'subnet_id' => subnets['external']['self_link'],
    'public_ip' => false
  }
end

def mgmt_interface(num_nics, subnets)
  {
    'subnet_id' => subnets['management']['self_link'],
    'public_ip' => true
  }
end

def internal_interfaces(num_nics, subnets)
  if num_nics <3
    return nil
  end
  (2...num_nics).collect do |i|
    {
      'subnet_id' => subnets["internal-#{i-2}"]['self_link'],
      'public_ip' => false
    }
  end
end
%>
---
driver:
  name: terraform
  verify_version: true
  variables:
    # Set the upstream module's sleep_delay to 10s; this speeds up time to
    # convergence when running a full test suite against the root module.
    # NOTE: The ha-gce test profile includes a control that fails inspec if the VMs
    # have not had enough expected time to complete onboarding.
    sleep_time: '10s'
    num_instances: '<%= num_instances %>'
  # This file will be generated by test/setup Terraform
  # NOTE: values in this file will override the 'variables:' section everywhere
  variable_files:
    - <%= harness_outputs['harness_tfvars'] %>

transport:
  name: terraform
  command_timeout: 600

provisioner:
  name: terraform

verifier:
  name: terraform
  color: true

platforms:
<%
cidr_offset = 0
(2..8).each do |num_nics|
  versions.each do |ver,image|
    cidr_offset += 10
%>
  - name: '<%= "min-#{ver}-#{num_nics}n" %>'
    driver:
      variables:
        image: <%= image %>
        prefix: <%= "#{harness_outputs['prefix']}-min-#{ver}-#{num_nics}n" %>
        machine_type: '<%= num_nics > 4 ? 'n1-standard-8' : 'n1-standard-4' %>'
        mgmt_interface: '<%= hash_to_input_var(mgmt_interface(num_nics, harness_outputs['subnets'])) %>'
        external_interface: '<%= hash_to_input_var(external_interface(num_nics, harness_outputs['subnets'])) %>'
        internal_interfaces: '<%= array_to_input_var(internal_interfaces(num_nics, harness_outputs['subnets'])) %>'
    transport:
      root_module_directory: test/fixtures/root
  - name: '<%= "nm-#{ver}-#{num_nics}n" %>'
    driver:
      variables:
        instances: '<%= hash_to_input_var({"#{harness_outputs['prefix']}-nm-#{ver}-#{num_nics}n-a": nil, "#{harness_outputs['prefix']}-nm-#{ver}-#{num_nics}n-b": nil}) %>'
        image: <%= image %>
        prefix: <%= "#{harness_outputs['prefix']}-nm-#{ver}-#{num_nics}n" %>
        machine_type: '<%= num_nics > 4 ? 'n1-standard-8' : 'n1-standard-4' %>'
        mgmt_interface: '<%= hash_to_input_var(mgmt_interface(num_nics, harness_outputs['subnets'])) %>'
        external_interface: '<%= hash_to_input_var(external_interface(num_nics, harness_outputs['subnets'])) %>'
        internal_interfaces: '<%= array_to_input_var(internal_interfaces(num_nics, harness_outputs['subnets'])) %>'
    transport:
      root_module_directory: test/fixtures/root
  # - name: '<%= "full-#{ver}-#{num_nics}n" %>'
  #   driver:
  #     variables:
  #       instances: '<%= hash_to_input_var({"#{harness_outputs['prefix']}-full-#{ver}-#{num_nics}n-a": nil, "#{harness_outputs['prefix']}-full-#{ver}-#{num_nics}n-b": nil}) %>'
  #       image: <%= image %>
  #       prefix: <%= "#{harness_outputs['prefix']}-full-#{ver}-#{num_nics}n" %>
  #       machine_type: '<%= num_nics > 4 ? 'n1-standard-8' : 'n1-standard-4' %>'
  #       mgmt_interface: '<%= hash_to_input_var(mgmt_interface(num_nics, harness_outputs['subnets'])) %>'
  #       external_interface: '<%= hash_to_input_var(external_interface(num_nics, harness_outputs['subnets'])) %>'
  #       internal_interfaces: '<%= array_to_input_var(internal_interfaces(num_nics, harness_outputs['subnets'])) %>'
  #   transport:
  #     root_module_directory: test/fixtures/root
<%
  end
end
%>

suites:
  - name: ha
    verifier:
      systems:
        - name: compute-engine
          backend: gcp
          profile_locations:
            - test/profiles/ha-gce
        - name: ssh
          backend: ssh
          hosts_output: bigip_addresses
          key_files:
            - <%= harness_outputs['ssh_privkey_path'] %>
          user: admin
          profile_locations:
            - test/profiles/ha-ssh
<%
(0..(num_instances-1)).each do |index|
%>
        - name: '<%= "atc-#{index}" %>'
          backend: local
          attrs_outputs:
            bigip_address: '<%= "bigip_address_#{index}" %>'
            user: f5_username
            password: f5_password
          profile_locations:
            - https://github.com/f5devcentral/big-ip-atc-ready.git
          controls:
            - bigip-connectivity
            - bigip-declarative-onboarding
            - bigip-application-services
            - bigip-telemetry-streaming
            - bigip-fast
            - bigip-licensed
<%
end
%>
